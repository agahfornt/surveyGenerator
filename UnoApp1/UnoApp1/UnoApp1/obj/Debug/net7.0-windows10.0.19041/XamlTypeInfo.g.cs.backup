//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace UnoApp1.UnoApp1_XamlTypeInfo
{
    /// <summary>
    /// Main class for providing metadata for the app or library
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed class XamlMetaDataProvider : global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::UnoApp1.UnoApp1_XamlTypeInfo.XamlTypeInfoProvider _provider = null;

        private global::UnoApp1.UnoApp1_XamlTypeInfo.XamlTypeInfoProvider Provider
        {
            get
            {
                if (_provider == null)
                {
                    _provider = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlTypeInfoProvider();
                }
                return _provider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        [global::Windows.Foundation.Metadata.DefaultOverload]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return Provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return Provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType) 
            { 
                if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByType(type);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Microsoft.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType)
            {
                if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByName(typeName);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Microsoft.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Microsoft.UI.Xaml.Markup.IXamlMember xamlMember;
            lock (_xamlMembers)
            {
                if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
                {
                    return xamlMember;
                }
                xamlMember = CreateXamlMember(longMemberName);
                if (xamlMember != null)
                {
                    _xamlMembers.Add(longMemberName, xamlMember);
                }
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Microsoft.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Microsoft.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[82];
            _typeNameTable[0] = "Microsoft.UI.Xaml.Controls.XamlControlsResources";
            _typeNameTable[1] = "Microsoft.UI.Xaml.ResourceDictionary";
            _typeNameTable[2] = "Object";
            _typeNameTable[3] = "Boolean";
            _typeNameTable[4] = "Uno.Toolkit.UI.Material.MaterialToolkitTheme";
            _typeNameTable[5] = "String";
            _typeNameTable[6] = "UnoApp1.Presentation.groupBoxes.dateoptionGBox";
            _typeNameTable[7] = "Microsoft.UI.Xaml.Controls.UserControl";
            _typeNameTable[8] = "UnoApp1.Presentation.groupBoxes.drpDownStyleSelect";
            _typeNameTable[9] = "UnoApp1.Presentation.groupBoxes.lableSetting";
            _typeNameTable[10] = "Uno.Toolkit.UI.TabBar";
            _typeNameTable[11] = "Microsoft.UI.Xaml.Controls.ItemsControl";
            _typeNameTable[12] = "Int32";
            _typeNameTable[13] = "Uno.Toolkit.UI.TabBarTemplateSettings";
            _typeNameTable[14] = "Microsoft.UI.Xaml.DependencyObject";
            _typeNameTable[15] = "Microsoft.UI.Xaml.Controls.Orientation";
            _typeNameTable[16] = "Microsoft.UI.Xaml.DataTemplate";
            _typeNameTable[17] = "Microsoft.UI.Xaml.Style";
            _typeNameTable[18] = "Uno.Toolkit.UI.IndicatorTransitionMode";
            _typeNameTable[19] = "System.Enum";
            _typeNameTable[20] = "System.ValueType";
            _typeNameTable[21] = "Uno.Toolkit.UI.IndicatorPlacement";
            _typeNameTable[22] = "Uno.Toolkit.UI.TabBarItem";
            _typeNameTable[23] = "Microsoft.UI.Xaml.Controls.Primitives.SelectorItem";
            _typeNameTable[24] = "Microsoft.UI.Xaml.Controls.ContentControl";
            _typeNameTable[25] = "Microsoft.UI.Xaml.Controls.IconElement";
            _typeNameTable[26] = "Microsoft.UI.Xaml.Visibility";
            _typeNameTable[27] = "Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase";
            _typeNameTable[28] = "System.Windows.Input.ICommand";
            _typeNameTable[29] = "UnoApp1.Presentation.dateAnswer";
            _typeNameTable[30] = "UnoApp1.Presentation.groupBoxes.answerGBox";
            _typeNameTable[31] = "UnoApp1.Presentation.groupBoxes.colsettingGBox";
            _typeNameTable[32] = "UnoApp1.Presentation.groupBoxes.drpDownChoose_from_the_options";
            _typeNameTable[33] = "UnoApp1.Presentation.groupBoxes.like_dislikeGBox";
            _typeNameTable[34] = "UnoApp1.Presentation.groupBoxes.min_maxSelect";
            _typeNameTable[35] = "UnoApp1.Presentation.groupBoxes.namingColumnGBox";
            _typeNameTable[36] = "UnoApp1.Presentation.groupBoxes.scaleCount";
            _typeNameTable[37] = "UnoApp1.Presentation.groupBoxes.timeoptionGBox";
            _typeNameTable[38] = "UnoApp1.Presentation.tabBar";
            _typeNameTable[39] = "UnoApp1.Presentation.Likert";
            _typeNameTable[40] = "UnoApp1.Presentation.likertTable";
            _typeNameTable[41] = "UnoApp1.Presentation.like_dislikeAnswer";
            _typeNameTable[42] = "UnoApp1.Presentation.timeAnswer";
            _typeNameTable[43] = "UnoApp1.Presentation.MainPage";
            _typeNameTable[44] = "Microsoft.UI.Xaml.Controls.Page";
            _typeNameTable[45] = "UnoApp1.Presentation.moltiselectiveTable";
            _typeNameTable[46] = "UnoApp1.Presentation.multiAnswer";
            _typeNameTable[47] = "UnoApp1.Presentation.multianswerTable";
            _typeNameTable[48] = "UnoApp1.Presentation.multiSelective";
            _typeNameTable[49] = "Uno.Toolkit.UI.SafeArea";
            _typeNameTable[50] = "Uno.Toolkit.UI.SafeArea.InsetMask";
            _typeNameTable[51] = "Uno.Toolkit.UI.SafeArea.InsetMode";
            _typeNameTable[52] = "Uno.Toolkit.UI.NavigationBar";
            _typeNameTable[53] = "Windows.Foundation.Collections.IObservableVector`1<Microsoft.UI.Xaml.Controls.ICommandBarElement>";
            _typeNameTable[54] = "Microsoft.UI.Xaml.Controls.ICommandBarElement";
            _typeNameTable[55] = "Microsoft.UI.Xaml.Controls.AppBarButton";
            _typeNameTable[56] = "Uno.Toolkit.UI.NavigationBarClosedDisplayMode";
            _typeNameTable[57] = "Microsoft.UI.Xaml.Controls.LightDismissOverlayMode";
            _typeNameTable[58] = "Uno.Toolkit.UI.NavigationBarOverflowButtonVisibility";
            _typeNameTable[59] = "Uno.Toolkit.UI.NavigationBarDefaultLabelPosition";
            _typeNameTable[60] = "Uno.Toolkit.UI.MainCommandMode";
            _typeNameTable[61] = "UnoApp1.Presentation.SecondPage";
            _typeNameTable[62] = "Uno.Toolkit.UI.ExtendedSplashScreen";
            _typeNameTable[63] = "Uno.Toolkit.UI.LoadingView";
            _typeNameTable[64] = "Uno.Toolkit.UI.SplashScreenPlatform";
            _typeNameTable[65] = "Windows.ApplicationModel.Activation.SplashScreen";
            _typeNameTable[66] = "Microsoft.UI.Xaml.Window";
            _typeNameTable[67] = "Uno.Toolkit.ILoadable";
            _typeNameTable[68] = "Microsoft.UI.Xaml.Controls.DataTemplateSelector";
            _typeNameTable[69] = "Microsoft.UI.Xaml.Controls.ProgressRing";
            _typeNameTable[70] = "Microsoft.UI.Xaml.Controls.Control";
            _typeNameTable[71] = "Double";
            _typeNameTable[72] = "Microsoft.UI.Xaml.Controls.ProgressRingTemplateSettings";
            _typeNameTable[73] = "UnoApp1.Presentation.Shell";
            _typeNameTable[74] = "UnoApp1.Presentation.viewUsercontrol.answer.UserControl1";
            _typeNameTable[75] = "UnoApp1.Presentation.viewUsercontrol.question.multianswerQuestionControl";
            _typeNameTable[76] = "UnoApp1.Presentation.views.multiAnswerView";
            _typeNameTable[77] = "Microsoft.UI.Xaml.Controls.RadioButtons";
            _typeNameTable[78] = "System.Collections.Generic.IList`1<Object>";
            _typeNameTable[79] = "UnoApp1.Presentation.viewUsercontrol.answer.multianswerUserControl";
            _typeNameTable[80] = "Windows.UI.Color";
            _typeNameTable[81] = "Byte";

            _typeTable = new global::System.Type[82];
            _typeTable[0] = typeof(global::Microsoft.UI.Xaml.Controls.XamlControlsResources);
            _typeTable[1] = typeof(global::Microsoft.UI.Xaml.ResourceDictionary);
            _typeTable[2] = typeof(global::System.Object);
            _typeTable[3] = typeof(global::System.Boolean);
            _typeTable[4] = typeof(global::Uno.Toolkit.UI.Material.MaterialToolkitTheme);
            _typeTable[5] = typeof(global::System.String);
            _typeTable[6] = typeof(global::UnoApp1.Presentation.groupBoxes.dateoptionGBox);
            _typeTable[7] = typeof(global::Microsoft.UI.Xaml.Controls.UserControl);
            _typeTable[8] = typeof(global::UnoApp1.Presentation.groupBoxes.drpDownStyleSelect);
            _typeTable[9] = typeof(global::UnoApp1.Presentation.groupBoxes.lableSetting);
            _typeTable[10] = typeof(global::Uno.Toolkit.UI.TabBar);
            _typeTable[11] = typeof(global::Microsoft.UI.Xaml.Controls.ItemsControl);
            _typeTable[12] = typeof(global::System.Int32);
            _typeTable[13] = typeof(global::Uno.Toolkit.UI.TabBarTemplateSettings);
            _typeTable[14] = typeof(global::Microsoft.UI.Xaml.DependencyObject);
            _typeTable[15] = typeof(global::Microsoft.UI.Xaml.Controls.Orientation);
            _typeTable[16] = typeof(global::Microsoft.UI.Xaml.DataTemplate);
            _typeTable[17] = typeof(global::Microsoft.UI.Xaml.Style);
            _typeTable[18] = typeof(global::Uno.Toolkit.UI.IndicatorTransitionMode);
            _typeTable[19] = typeof(global::System.Enum);
            _typeTable[20] = typeof(global::System.ValueType);
            _typeTable[21] = typeof(global::Uno.Toolkit.UI.IndicatorPlacement);
            _typeTable[22] = typeof(global::Uno.Toolkit.UI.TabBarItem);
            _typeTable[23] = typeof(global::Microsoft.UI.Xaml.Controls.Primitives.SelectorItem);
            _typeTable[24] = typeof(global::Microsoft.UI.Xaml.Controls.ContentControl);
            _typeTable[25] = typeof(global::Microsoft.UI.Xaml.Controls.IconElement);
            _typeTable[26] = typeof(global::Microsoft.UI.Xaml.Visibility);
            _typeTable[27] = typeof(global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase);
            _typeTable[28] = typeof(global::System.Windows.Input.ICommand);
            _typeTable[29] = typeof(global::UnoApp1.Presentation.dateAnswer);
            _typeTable[30] = typeof(global::UnoApp1.Presentation.groupBoxes.answerGBox);
            _typeTable[31] = typeof(global::UnoApp1.Presentation.groupBoxes.colsettingGBox);
            _typeTable[32] = typeof(global::UnoApp1.Presentation.groupBoxes.drpDownChoose_from_the_options);
            _typeTable[33] = typeof(global::UnoApp1.Presentation.groupBoxes.like_dislikeGBox);
            _typeTable[34] = typeof(global::UnoApp1.Presentation.groupBoxes.min_maxSelect);
            _typeTable[35] = typeof(global::UnoApp1.Presentation.groupBoxes.namingColumnGBox);
            _typeTable[36] = typeof(global::UnoApp1.Presentation.groupBoxes.scaleCount);
            _typeTable[37] = typeof(global::UnoApp1.Presentation.groupBoxes.timeoptionGBox);
            _typeTable[38] = typeof(global::UnoApp1.Presentation.tabBar);
            _typeTable[39] = typeof(global::UnoApp1.Presentation.Likert);
            _typeTable[40] = typeof(global::UnoApp1.Presentation.likertTable);
            _typeTable[41] = typeof(global::UnoApp1.Presentation.like_dislikeAnswer);
            _typeTable[42] = typeof(global::UnoApp1.Presentation.timeAnswer);
            _typeTable[43] = typeof(global::UnoApp1.Presentation.MainPage);
            _typeTable[44] = typeof(global::Microsoft.UI.Xaml.Controls.Page);
            _typeTable[45] = typeof(global::UnoApp1.Presentation.moltiselectiveTable);
            _typeTable[46] = typeof(global::UnoApp1.Presentation.multiAnswer);
            _typeTable[47] = typeof(global::UnoApp1.Presentation.multianswerTable);
            _typeTable[48] = typeof(global::UnoApp1.Presentation.multiSelective);
            _typeTable[49] = typeof(global::Uno.Toolkit.UI.SafeArea);
            _typeTable[50] = typeof(global::Uno.Toolkit.UI.SafeArea.InsetMask);
            _typeTable[51] = typeof(global::Uno.Toolkit.UI.SafeArea.InsetMode);
            _typeTable[52] = typeof(global::Uno.Toolkit.UI.NavigationBar);
            _typeTable[53] = typeof(global::Windows.Foundation.Collections.IObservableVector<global::Microsoft.UI.Xaml.Controls.ICommandBarElement>);
            _typeTable[54] = typeof(global::Microsoft.UI.Xaml.Controls.ICommandBarElement);
            _typeTable[55] = typeof(global::Microsoft.UI.Xaml.Controls.AppBarButton);
            _typeTable[56] = typeof(global::Uno.Toolkit.UI.NavigationBarClosedDisplayMode);
            _typeTable[57] = typeof(global::Microsoft.UI.Xaml.Controls.LightDismissOverlayMode);
            _typeTable[58] = typeof(global::Uno.Toolkit.UI.NavigationBarOverflowButtonVisibility);
            _typeTable[59] = typeof(global::Uno.Toolkit.UI.NavigationBarDefaultLabelPosition);
            _typeTable[60] = typeof(global::Uno.Toolkit.UI.MainCommandMode);
            _typeTable[61] = typeof(global::UnoApp1.Presentation.SecondPage);
            _typeTable[62] = typeof(global::Uno.Toolkit.UI.ExtendedSplashScreen);
            _typeTable[63] = typeof(global::Uno.Toolkit.UI.LoadingView);
            _typeTable[64] = typeof(global::Uno.Toolkit.UI.SplashScreenPlatform);
            _typeTable[65] = typeof(global::Windows.ApplicationModel.Activation.SplashScreen);
            _typeTable[66] = typeof(global::Microsoft.UI.Xaml.Window);
            _typeTable[67] = typeof(global::Uno.Toolkit.ILoadable);
            _typeTable[68] = typeof(global::Microsoft.UI.Xaml.Controls.DataTemplateSelector);
            _typeTable[69] = typeof(global::Microsoft.UI.Xaml.Controls.ProgressRing);
            _typeTable[70] = typeof(global::Microsoft.UI.Xaml.Controls.Control);
            _typeTable[71] = typeof(global::System.Double);
            _typeTable[72] = typeof(global::Microsoft.UI.Xaml.Controls.ProgressRingTemplateSettings);
            _typeTable[73] = typeof(global::UnoApp1.Presentation.Shell);
            _typeTable[74] = typeof(global::UnoApp1.Presentation.viewUsercontrol.answer.UserControl1);
            _typeTable[75] = typeof(global::UnoApp1.Presentation.viewUsercontrol.question.multianswerQuestionControl);
            _typeTable[76] = typeof(global::UnoApp1.Presentation.views.multiAnswerView);
            _typeTable[77] = typeof(global::Microsoft.UI.Xaml.Controls.RadioButtons);
            _typeTable[78] = typeof(global::System.Collections.Generic.IList<global::System.Object>);
            _typeTable[79] = typeof(global::UnoApp1.Presentation.viewUsercontrol.answer.multianswerUserControl);
            _typeTable[80] = typeof(global::Windows.UI.Color);
            _typeTable[81] = typeof(global::System.Byte);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_XamlControlsResources() { return new global::Microsoft.UI.Xaml.Controls.XamlControlsResources(); }
        private object Activate_4_MaterialToolkitTheme() { return new global::Uno.Toolkit.UI.Material.MaterialToolkitTheme(); }
        private object Activate_6_dateoptionGBox() { return new global::UnoApp1.Presentation.groupBoxes.dateoptionGBox(); }
        private object Activate_8_drpDownStyleSelect() { return new global::UnoApp1.Presentation.groupBoxes.drpDownStyleSelect(); }
        private object Activate_9_lableSetting() { return new global::UnoApp1.Presentation.groupBoxes.lableSetting(); }
        private object Activate_10_TabBar() { return new global::Uno.Toolkit.UI.TabBar(); }
        private object Activate_13_TabBarTemplateSettings() { return new global::Uno.Toolkit.UI.TabBarTemplateSettings(); }
        private object Activate_22_TabBarItem() { return new global::Uno.Toolkit.UI.TabBarItem(); }
        private object Activate_29_dateAnswer() { return new global::UnoApp1.Presentation.dateAnswer(); }
        private object Activate_30_answerGBox() { return new global::UnoApp1.Presentation.groupBoxes.answerGBox(); }
        private object Activate_31_colsettingGBox() { return new global::UnoApp1.Presentation.groupBoxes.colsettingGBox(); }
        private object Activate_32_drpDownChoose_from_the_options() { return new global::UnoApp1.Presentation.groupBoxes.drpDownChoose_from_the_options(); }
        private object Activate_33_like_dislikeGBox() { return new global::UnoApp1.Presentation.groupBoxes.like_dislikeGBox(); }
        private object Activate_34_min_maxSelect() { return new global::UnoApp1.Presentation.groupBoxes.min_maxSelect(); }
        private object Activate_35_namingColumnGBox() { return new global::UnoApp1.Presentation.groupBoxes.namingColumnGBox(); }
        private object Activate_36_scaleCount() { return new global::UnoApp1.Presentation.groupBoxes.scaleCount(); }
        private object Activate_37_timeoptionGBox() { return new global::UnoApp1.Presentation.groupBoxes.timeoptionGBox(); }
        private object Activate_38_tabBar() { return new global::UnoApp1.Presentation.tabBar(); }
        private object Activate_39_Likert() { return new global::UnoApp1.Presentation.Likert(); }
        private object Activate_40_likertTable() { return new global::UnoApp1.Presentation.likertTable(); }
        private object Activate_41_like_dislikeAnswer() { return new global::UnoApp1.Presentation.like_dislikeAnswer(); }
        private object Activate_42_timeAnswer() { return new global::UnoApp1.Presentation.timeAnswer(); }
        private object Activate_43_MainPage() { return new global::UnoApp1.Presentation.MainPage(); }
        private object Activate_45_moltiselectiveTable() { return new global::UnoApp1.Presentation.moltiselectiveTable(); }
        private object Activate_46_multiAnswer() { return new global::UnoApp1.Presentation.multiAnswer(); }
        private object Activate_47_multianswerTable() { return new global::UnoApp1.Presentation.multianswerTable(); }
        private object Activate_48_multiSelective() { return new global::UnoApp1.Presentation.multiSelective(); }
        private object Activate_49_SafeArea() { return new global::Uno.Toolkit.UI.SafeArea(); }
        private object Activate_52_NavigationBar() { return new global::Uno.Toolkit.UI.NavigationBar(); }
        private object Activate_61_SecondPage() { return new global::UnoApp1.Presentation.SecondPage(); }
        private object Activate_62_ExtendedSplashScreen() { return new global::Uno.Toolkit.UI.ExtendedSplashScreen(); }
        private object Activate_63_LoadingView() { return new global::Uno.Toolkit.UI.LoadingView(); }
        private object Activate_69_ProgressRing() { return new global::Microsoft.UI.Xaml.Controls.ProgressRing(); }
        private object Activate_73_Shell() { return new global::UnoApp1.Presentation.Shell(); }
        private object Activate_74_UserControl1() { return new global::UnoApp1.Presentation.viewUsercontrol.answer.UserControl1(); }
        private object Activate_75_multianswerQuestionControl() { return new global::UnoApp1.Presentation.viewUsercontrol.question.multianswerQuestionControl(); }
        private object Activate_76_multiAnswerView() { return new global::UnoApp1.Presentation.views.multiAnswerView(); }
        private object Activate_77_RadioButtons() { return new global::Microsoft.UI.Xaml.Controls.RadioButtons(); }
        private object Activate_79_multianswerUserControl() { return new global::UnoApp1.Presentation.viewUsercontrol.answer.multianswerUserControl(); }
        private void MapAdd_0_XamlControlsResources(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.Object, global::System.Object>)instance;
            var newKey = (global::System.Object)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }
        private void MapAdd_4_MaterialToolkitTheme(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.Object, global::System.Object>)instance;
            var newKey = (global::System.Object)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }
        private void VectorAdd_53_IObservableVector(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Microsoft.UI.Xaml.Controls.ICommandBarElement>)instance;
            var newItem = (global::Microsoft.UI.Xaml.Controls.ICommandBarElement)item;
            collection.Add(newItem);
        }
        private void VectorAdd_78_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Object>)instance;
            var newItem = (global::System.Object)item;
            collection.Add(newItem);
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::UnoApp1.UnoApp1_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Microsoft.UI.Xaml.Controls.XamlControlsResources
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.ResourceDictionary"));
                userType.Activator = Activate_0_XamlControlsResources;
                userType.DictionaryAdd = MapAdd_0_XamlControlsResources;
                userType.AddMemberName("UseCompactResources");
                xamlType = userType;
                break;

            case 1:   //  Microsoft.UI.Xaml.ResourceDictionary
                xamlType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Object
                xamlType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  Boolean
                xamlType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 4:   //  Uno.Toolkit.UI.Material.MaterialToolkitTheme
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.ResourceDictionary"));
                userType.Activator = Activate_4_MaterialToolkitTheme;
                userType.DictionaryAdd = MapAdd_4_MaterialToolkitTheme;
                userType.AddMemberName("ColorOverrideSource");
                userType.AddMemberName("FontOverrideSource");
                userType.AddMemberName("FontOverrideDictionary");
                userType.AddMemberName("ColorOverrideDictionary");
                xamlType = userType;
                break;

            case 5:   //  String
                xamlType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  UnoApp1.Presentation.groupBoxes.dateoptionGBox
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_6_dateoptionGBox;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 7:   //  Microsoft.UI.Xaml.Controls.UserControl
                xamlType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 8:   //  UnoApp1.Presentation.groupBoxes.drpDownStyleSelect
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_8_drpDownStyleSelect;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 9:   //  UnoApp1.Presentation.groupBoxes.lableSetting
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_9_lableSetting;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 10:   //  Uno.Toolkit.UI.TabBar
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ItemsControl"));
                userType.Activator = Activate_10_TabBar;
                userType.AddMemberName("SelectedItem");
                userType.AddMemberName("SelectedIndex");
                userType.AddMemberName("TemplateSettings");
                userType.AddMemberName("Orientation");
                userType.AddMemberName("SelectionIndicatorContent");
                userType.AddMemberName("SelectionIndicatorContentTemplate");
                userType.AddMemberName("SelectionIndicatorPresenterStyle");
                userType.AddMemberName("SelectionIndicatorTransitionMode");
                userType.AddMemberName("SelectionIndicatorPlacement");
                xamlType = userType;
                break;

            case 11:   //  Microsoft.UI.Xaml.Controls.ItemsControl
                xamlType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 12:   //  Int32
                xamlType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 13:   //  Uno.Toolkit.UI.TabBarTemplateSettings
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 14:   //  Microsoft.UI.Xaml.DependencyObject
                xamlType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 15:   //  Microsoft.UI.Xaml.Controls.Orientation
                xamlType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 16:   //  Microsoft.UI.Xaml.DataTemplate
                xamlType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 17:   //  Microsoft.UI.Xaml.Style
                xamlType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 18:   //  Uno.Toolkit.UI.IndicatorTransitionMode
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Snap", global::Uno.Toolkit.UI.IndicatorTransitionMode.Snap);
                userType.AddEnumValue("Slide", global::Uno.Toolkit.UI.IndicatorTransitionMode.Slide);
                xamlType = userType;
                break;

            case 19:   //  System.Enum
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 20:   //  System.ValueType
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 21:   //  Uno.Toolkit.UI.IndicatorPlacement
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Above", global::Uno.Toolkit.UI.IndicatorPlacement.Above);
                userType.AddEnumValue("Below", global::Uno.Toolkit.UI.IndicatorPlacement.Below);
                xamlType = userType;
                break;

            case 22:   //  Uno.Toolkit.UI.TabBarItem
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Primitives.SelectorItem"));
                userType.Activator = Activate_22_TabBarItem;
                userType.AddMemberName("Icon");
                userType.AddMemberName("BadgeVisibility");
                userType.AddMemberName("BadgeValue");
                userType.AddMemberName("IsSelectable");
                userType.AddMemberName("Flyout");
                userType.AddMemberName("Command");
                userType.AddMemberName("CommandParameter");
                xamlType = userType;
                break;

            case 23:   //  Microsoft.UI.Xaml.Controls.Primitives.SelectorItem
                xamlType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 24:   //  Microsoft.UI.Xaml.Controls.ContentControl
                xamlType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 25:   //  Microsoft.UI.Xaml.Controls.IconElement
                xamlType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 26:   //  Microsoft.UI.Xaml.Visibility
                xamlType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 27:   //  Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase
                xamlType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 28:   //  System.Windows.Input.ICommand
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 29:   //  UnoApp1.Presentation.dateAnswer
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_29_dateAnswer;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 30:   //  UnoApp1.Presentation.groupBoxes.answerGBox
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_30_answerGBox;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 31:   //  UnoApp1.Presentation.groupBoxes.colsettingGBox
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_31_colsettingGBox;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 32:   //  UnoApp1.Presentation.groupBoxes.drpDownChoose_from_the_options
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_32_drpDownChoose_from_the_options;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 33:   //  UnoApp1.Presentation.groupBoxes.like_dislikeGBox
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_33_like_dislikeGBox;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 34:   //  UnoApp1.Presentation.groupBoxes.min_maxSelect
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_34_min_maxSelect;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 35:   //  UnoApp1.Presentation.groupBoxes.namingColumnGBox
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_35_namingColumnGBox;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 36:   //  UnoApp1.Presentation.groupBoxes.scaleCount
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_36_scaleCount;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 37:   //  UnoApp1.Presentation.groupBoxes.timeoptionGBox
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_37_timeoptionGBox;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 38:   //  UnoApp1.Presentation.tabBar
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_38_tabBar;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 39:   //  UnoApp1.Presentation.Likert
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_39_Likert;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 40:   //  UnoApp1.Presentation.likertTable
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_40_likertTable;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 41:   //  UnoApp1.Presentation.like_dislikeAnswer
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_41_like_dislikeAnswer;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 42:   //  UnoApp1.Presentation.timeAnswer
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_42_timeAnswer;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 43:   //  UnoApp1.Presentation.MainPage
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_43_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 44:   //  Microsoft.UI.Xaml.Controls.Page
                xamlType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 45:   //  UnoApp1.Presentation.moltiselectiveTable
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_45_moltiselectiveTable;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 46:   //  UnoApp1.Presentation.multiAnswer
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_46_multiAnswer;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 47:   //  UnoApp1.Presentation.multianswerTable
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_47_multianswerTable;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 48:   //  UnoApp1.Presentation.multiSelective
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_48_multiSelective;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 49:   //  Uno.Toolkit.UI.SafeArea
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_49_SafeArea;
                userType.AddMemberName("Insets");
                userType.AddMemberName("Mode");
                xamlType = userType;
                break;

            case 50:   //  Uno.Toolkit.UI.SafeArea.InsetMask
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Uno.Toolkit.UI.SafeArea.InsetMask.None);
                userType.AddEnumValue("Top", global::Uno.Toolkit.UI.SafeArea.InsetMask.Top);
                userType.AddEnumValue("Bottom", global::Uno.Toolkit.UI.SafeArea.InsetMask.Bottom);
                userType.AddEnumValue("Left", global::Uno.Toolkit.UI.SafeArea.InsetMask.Left);
                userType.AddEnumValue("Right", global::Uno.Toolkit.UI.SafeArea.InsetMask.Right);
                userType.AddEnumValue("VisibleBounds", global::Uno.Toolkit.UI.SafeArea.InsetMask.VisibleBounds);
                userType.AddEnumValue("SoftInput", global::Uno.Toolkit.UI.SafeArea.InsetMask.SoftInput);
                userType.AddEnumValue("All", global::Uno.Toolkit.UI.SafeArea.InsetMask.All);
                xamlType = userType;
                break;

            case 51:   //  Uno.Toolkit.UI.SafeArea.InsetMode
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Padding", global::Uno.Toolkit.UI.SafeArea.InsetMode.Padding);
                userType.AddEnumValue("Margin", global::Uno.Toolkit.UI.SafeArea.InsetMode.Margin);
                xamlType = userType;
                break;

            case 52:   //  Uno.Toolkit.UI.NavigationBar
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_52_NavigationBar;
                userType.SetContentPropertyName("Uno.Toolkit.UI.NavigationBar.PrimaryCommands");
                userType.AddMemberName("PrimaryCommands");
                userType.AddMemberName("MainCommand");
                userType.AddMemberName("IsSticky");
                userType.AddMemberName("IsOpen");
                userType.AddMemberName("ClosedDisplayMode");
                userType.AddMemberName("LightDismissOverlayMode");
                userType.AddMemberName("SecondaryCommands");
                userType.AddMemberName("OverflowButtonVisibility");
                userType.AddMemberName("IsDynamicOverflowEnabled");
                userType.AddMemberName("DefaultLabelPosition");
                userType.AddMemberName("MainCommandMode");
                userType.AddMemberName("Subtitle");
                userType.AddMemberName("MainCommandStyle");
                xamlType = userType;
                break;

            case 53:   //  Windows.Foundation.Collections.IObservableVector`1<Microsoft.UI.Xaml.Controls.ICommandBarElement>
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.CollectionAdd = VectorAdd_53_IObservableVector;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 54:   //  Microsoft.UI.Xaml.Controls.ICommandBarElement
                xamlType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 55:   //  Microsoft.UI.Xaml.Controls.AppBarButton
                xamlType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 56:   //  Uno.Toolkit.UI.NavigationBarClosedDisplayMode
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Compact", global::Uno.Toolkit.UI.NavigationBarClosedDisplayMode.Compact);
                userType.AddEnumValue("Minimal", global::Uno.Toolkit.UI.NavigationBarClosedDisplayMode.Minimal);
                userType.AddEnumValue("Hidden", global::Uno.Toolkit.UI.NavigationBarClosedDisplayMode.Hidden);
                xamlType = userType;
                break;

            case 57:   //  Microsoft.UI.Xaml.Controls.LightDismissOverlayMode
                xamlType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 58:   //  Uno.Toolkit.UI.NavigationBarOverflowButtonVisibility
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Auto", global::Uno.Toolkit.UI.NavigationBarOverflowButtonVisibility.Auto);
                userType.AddEnumValue("Visible", global::Uno.Toolkit.UI.NavigationBarOverflowButtonVisibility.Visible);
                userType.AddEnumValue("Collapsed", global::Uno.Toolkit.UI.NavigationBarOverflowButtonVisibility.Collapsed);
                xamlType = userType;
                break;

            case 59:   //  Uno.Toolkit.UI.NavigationBarDefaultLabelPosition
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Bottom", global::Uno.Toolkit.UI.NavigationBarDefaultLabelPosition.Bottom);
                userType.AddEnumValue("Right", global::Uno.Toolkit.UI.NavigationBarDefaultLabelPosition.Right);
                userType.AddEnumValue("Collapsed", global::Uno.Toolkit.UI.NavigationBarDefaultLabelPosition.Collapsed);
                xamlType = userType;
                break;

            case 60:   //  Uno.Toolkit.UI.MainCommandMode
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Back", global::Uno.Toolkit.UI.MainCommandMode.Back);
                userType.AddEnumValue("Action", global::Uno.Toolkit.UI.MainCommandMode.Action);
                xamlType = userType;
                break;

            case 61:   //  UnoApp1.Presentation.SecondPage
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_61_SecondPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 62:   //  Uno.Toolkit.UI.ExtendedSplashScreen
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Uno.Toolkit.UI.LoadingView"));
                userType.Activator = Activate_62_ExtendedSplashScreen;
                userType.AddMemberName("Platforms");
                userType.AddMemberName("SplashScreen");
                userType.AddMemberName("Window");
                userType.AddMemberName("SplashIsEnabled");
                xamlType = userType;
                break;

            case 63:   //  Uno.Toolkit.UI.LoadingView
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_63_LoadingView;
                userType.AddMemberName("LoadingContentTemplate");
                userType.AddMemberName("UseTransitions");
                userType.AddMemberName("Source");
                userType.AddMemberName("LoadingContent");
                userType.AddMemberName("LoadingContentTemplateSelector");
                xamlType = userType;
                break;

            case 64:   //  Uno.Toolkit.UI.SplashScreenPlatform
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("None", global::Uno.Toolkit.UI.SplashScreenPlatform.None);
                userType.AddEnumValue("Android", global::Uno.Toolkit.UI.SplashScreenPlatform.Android);
                userType.AddEnumValue("iOS", global::Uno.Toolkit.UI.SplashScreenPlatform.iOS);
                userType.AddEnumValue("Windows", global::Uno.Toolkit.UI.SplashScreenPlatform.Windows);
                userType.AddEnumValue("WebAssembly", global::Uno.Toolkit.UI.SplashScreenPlatform.WebAssembly);
                userType.AddEnumValue("Skia", global::Uno.Toolkit.UI.SplashScreenPlatform.Skia);
                userType.AddEnumValue("All", global::Uno.Toolkit.UI.SplashScreenPlatform.All);
                xamlType = userType;
                break;

            case 65:   //  Windows.ApplicationModel.Activation.SplashScreen
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 66:   //  Microsoft.UI.Xaml.Window
                xamlType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 67:   //  Uno.Toolkit.ILoadable
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 68:   //  Microsoft.UI.Xaml.Controls.DataTemplateSelector
                xamlType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 69:   //  Microsoft.UI.Xaml.Controls.ProgressRing
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_69_ProgressRing;
                userType.AddMemberName("IsActive");
                userType.AddMemberName("IsIndeterminate");
                userType.AddMemberName("Maximum");
                userType.AddMemberName("Minimum");
                userType.AddMemberName("TemplateSettings");
                userType.AddMemberName("Value");
                xamlType = userType;
                break;

            case 70:   //  Microsoft.UI.Xaml.Controls.Control
                xamlType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 71:   //  Double
                xamlType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 72:   //  Microsoft.UI.Xaml.Controls.ProgressRingTemplateSettings
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 73:   //  UnoApp1.Presentation.Shell
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_73_Shell;
                userType.AddMemberName("ContentControl");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 74:   //  UnoApp1.Presentation.viewUsercontrol.answer.UserControl1
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_74_UserControl1;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 75:   //  UnoApp1.Presentation.viewUsercontrol.question.multianswerQuestionControl
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_75_multianswerQuestionControl;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 76:   //  UnoApp1.Presentation.views.multiAnswerView
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_76_multiAnswerView;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 77:   //  Microsoft.UI.Xaml.Controls.RadioButtons
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_77_RadioButtons;
                userType.SetContentPropertyName("Microsoft.UI.Xaml.Controls.RadioButtons.Items");
                userType.AddMemberName("Items");
                userType.AddMemberName("Header");
                userType.AddMemberName("HeaderTemplate");
                userType.AddMemberName("ItemTemplate");
                userType.AddMemberName("ItemsSource");
                userType.AddMemberName("MaxColumns");
                userType.AddMemberName("SelectedIndex");
                userType.AddMemberName("SelectedItem");
                xamlType = userType;
                break;

            case 78:   //  System.Collections.Generic.IList`1<Object>
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.CollectionAdd = VectorAdd_78_IList;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 79:   //  UnoApp1.Presentation.viewUsercontrol.answer.multianswerUserControl
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_79_multianswerUserControl;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 80:   //  Windows.UI.Color
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.AddMemberName("A");
                userType.AddMemberName("R");
                userType.AddMemberName("G");
                userType.AddMemberName("B");
                xamlType = userType;
                break;

            case 81:   //  Byte
                userType = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Microsoft.UI.Xaml.XamlTypeInfo.XamlControlsXamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Uno.Extensions.Navigation.Toolkit.WinUI.Uno_Extensions_Navigation_Toolkit_WinUI_XamlTypeInfo.XamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Uno.Extensions.Navigation.WinUI.Uno_Extensions_Navigation_WinUI_XamlTypeInfo.XamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Uno.Material.Uno_Material_XamlTypeInfo.XamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Uno.Toolkit.UI.Uno_Toolkit_WinUI_XamlTypeInfo.XamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Uno.Toolkit.UI.Material.Uno_Toolkit_WinUI_Material_XamlTypeInfo.XamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Uno.UI.Toolkit.Uno_UI_Toolkit_XamlTypeInfo.XamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Microsoft.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Microsoft.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_XamlControlsResources_UseCompactResources(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.XamlControlsResources)instance;
            return that.UseCompactResources;
        }
        private void set_0_XamlControlsResources_UseCompactResources(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.XamlControlsResources)instance;
            that.UseCompactResources = (global::System.Boolean)Value;
        }
        private object get_1_MaterialToolkitTheme_ColorOverrideSource(object instance)
        {
            var that = (global::Uno.Toolkit.UI.Material.MaterialToolkitTheme)instance;
            return that.ColorOverrideSource;
        }
        private void set_1_MaterialToolkitTheme_ColorOverrideSource(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.Material.MaterialToolkitTheme)instance;
            that.ColorOverrideSource = (global::System.String)Value;
        }
        private object get_2_MaterialToolkitTheme_FontOverrideSource(object instance)
        {
            var that = (global::Uno.Toolkit.UI.Material.MaterialToolkitTheme)instance;
            return that.FontOverrideSource;
        }
        private void set_2_MaterialToolkitTheme_FontOverrideSource(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.Material.MaterialToolkitTheme)instance;
            that.FontOverrideSource = (global::System.String)Value;
        }
        private object get_3_MaterialToolkitTheme_FontOverrideDictionary(object instance)
        {
            var that = (global::Uno.Toolkit.UI.Material.MaterialToolkitTheme)instance;
            return that.FontOverrideDictionary;
        }
        private void set_3_MaterialToolkitTheme_FontOverrideDictionary(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.Material.MaterialToolkitTheme)instance;
            that.FontOverrideDictionary = (global::Microsoft.UI.Xaml.ResourceDictionary)Value;
        }
        private object get_4_MaterialToolkitTheme_ColorOverrideDictionary(object instance)
        {
            var that = (global::Uno.Toolkit.UI.Material.MaterialToolkitTheme)instance;
            return that.ColorOverrideDictionary;
        }
        private void set_4_MaterialToolkitTheme_ColorOverrideDictionary(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.Material.MaterialToolkitTheme)instance;
            that.ColorOverrideDictionary = (global::Microsoft.UI.Xaml.ResourceDictionary)Value;
        }
        private object get_5_TabBar_SelectedItem(object instance)
        {
            var that = (global::Uno.Toolkit.UI.TabBar)instance;
            return that.SelectedItem;
        }
        private void set_5_TabBar_SelectedItem(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.TabBar)instance;
            that.SelectedItem = (global::System.Object)Value;
        }
        private object get_6_TabBar_SelectedIndex(object instance)
        {
            var that = (global::Uno.Toolkit.UI.TabBar)instance;
            return that.SelectedIndex;
        }
        private void set_6_TabBar_SelectedIndex(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.TabBar)instance;
            that.SelectedIndex = (global::System.Int32)Value;
        }
        private object get_7_TabBar_TemplateSettings(object instance)
        {
            var that = (global::Uno.Toolkit.UI.TabBar)instance;
            return that.TemplateSettings;
        }
        private void set_7_TabBar_TemplateSettings(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.TabBar)instance;
            that.TemplateSettings = (global::Uno.Toolkit.UI.TabBarTemplateSettings)Value;
        }
        private object get_8_TabBar_Orientation(object instance)
        {
            var that = (global::Uno.Toolkit.UI.TabBar)instance;
            return that.Orientation;
        }
        private void set_8_TabBar_Orientation(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.TabBar)instance;
            that.Orientation = (global::Microsoft.UI.Xaml.Controls.Orientation)Value;
        }
        private object get_9_TabBar_SelectionIndicatorContent(object instance)
        {
            var that = (global::Uno.Toolkit.UI.TabBar)instance;
            return that.SelectionIndicatorContent;
        }
        private void set_9_TabBar_SelectionIndicatorContent(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.TabBar)instance;
            that.SelectionIndicatorContent = (global::System.Object)Value;
        }
        private object get_10_TabBar_SelectionIndicatorContentTemplate(object instance)
        {
            var that = (global::Uno.Toolkit.UI.TabBar)instance;
            return that.SelectionIndicatorContentTemplate;
        }
        private void set_10_TabBar_SelectionIndicatorContentTemplate(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.TabBar)instance;
            that.SelectionIndicatorContentTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_11_TabBar_SelectionIndicatorPresenterStyle(object instance)
        {
            var that = (global::Uno.Toolkit.UI.TabBar)instance;
            return that.SelectionIndicatorPresenterStyle;
        }
        private void set_11_TabBar_SelectionIndicatorPresenterStyle(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.TabBar)instance;
            that.SelectionIndicatorPresenterStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_12_TabBar_SelectionIndicatorTransitionMode(object instance)
        {
            var that = (global::Uno.Toolkit.UI.TabBar)instance;
            return that.SelectionIndicatorTransitionMode;
        }
        private void set_12_TabBar_SelectionIndicatorTransitionMode(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.TabBar)instance;
            that.SelectionIndicatorTransitionMode = (global::Uno.Toolkit.UI.IndicatorTransitionMode)Value;
        }
        private object get_13_TabBar_SelectionIndicatorPlacement(object instance)
        {
            var that = (global::Uno.Toolkit.UI.TabBar)instance;
            return that.SelectionIndicatorPlacement;
        }
        private void set_13_TabBar_SelectionIndicatorPlacement(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.TabBar)instance;
            that.SelectionIndicatorPlacement = (global::Uno.Toolkit.UI.IndicatorPlacement)Value;
        }
        private object get_14_TabBarItem_Icon(object instance)
        {
            var that = (global::Uno.Toolkit.UI.TabBarItem)instance;
            return that.Icon;
        }
        private void set_14_TabBarItem_Icon(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.TabBarItem)instance;
            that.Icon = (global::Microsoft.UI.Xaml.Controls.IconElement)Value;
        }
        private object get_15_TabBarItem_BadgeVisibility(object instance)
        {
            var that = (global::Uno.Toolkit.UI.TabBarItem)instance;
            return that.BadgeVisibility;
        }
        private void set_15_TabBarItem_BadgeVisibility(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.TabBarItem)instance;
            that.BadgeVisibility = (global::Microsoft.UI.Xaml.Visibility)Value;
        }
        private object get_16_TabBarItem_BadgeValue(object instance)
        {
            var that = (global::Uno.Toolkit.UI.TabBarItem)instance;
            return that.BadgeValue;
        }
        private void set_16_TabBarItem_BadgeValue(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.TabBarItem)instance;
            that.BadgeValue = (global::System.String)Value;
        }
        private object get_17_TabBarItem_IsSelectable(object instance)
        {
            var that = (global::Uno.Toolkit.UI.TabBarItem)instance;
            return that.IsSelectable;
        }
        private void set_17_TabBarItem_IsSelectable(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.TabBarItem)instance;
            that.IsSelectable = (global::System.Boolean)Value;
        }
        private object get_18_TabBarItem_Flyout(object instance)
        {
            var that = (global::Uno.Toolkit.UI.TabBarItem)instance;
            return that.Flyout;
        }
        private void set_18_TabBarItem_Flyout(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.TabBarItem)instance;
            that.Flyout = (global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase)Value;
        }
        private object get_19_TabBarItem_Command(object instance)
        {
            var that = (global::Uno.Toolkit.UI.TabBarItem)instance;
            return that.Command;
        }
        private void set_19_TabBarItem_Command(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.TabBarItem)instance;
            that.Command = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_20_TabBarItem_CommandParameter(object instance)
        {
            var that = (global::Uno.Toolkit.UI.TabBarItem)instance;
            return that.CommandParameter;
        }
        private void set_20_TabBarItem_CommandParameter(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.TabBarItem)instance;
            that.CommandParameter = (global::System.Object)Value;
        }
        private object get_21_SafeArea_Insets(object instance)
        {
            return global::Uno.Toolkit.UI.SafeArea.GetInsets((global::Microsoft.UI.Xaml.DependencyObject)instance);
        }
        private void set_21_SafeArea_Insets(object instance, object Value)
        {
            global::Uno.Toolkit.UI.SafeArea.SetInsets((global::Microsoft.UI.Xaml.DependencyObject)instance, (global::Uno.Toolkit.UI.SafeArea.InsetMask)Value);
        }
        private object get_22_SafeArea_Mode(object instance)
        {
            return global::Uno.Toolkit.UI.SafeArea.GetMode((global::Microsoft.UI.Xaml.DependencyObject)instance);
        }
        private void set_22_SafeArea_Mode(object instance, object Value)
        {
            global::Uno.Toolkit.UI.SafeArea.SetMode((global::Microsoft.UI.Xaml.DependencyObject)instance, (global::Uno.Toolkit.UI.SafeArea.InsetMode)Value);
        }
        private object get_23_NavigationBar_PrimaryCommands(object instance)
        {
            var that = (global::Uno.Toolkit.UI.NavigationBar)instance;
            return that.PrimaryCommands;
        }
        private object get_24_NavigationBar_MainCommand(object instance)
        {
            var that = (global::Uno.Toolkit.UI.NavigationBar)instance;
            return that.MainCommand;
        }
        private void set_24_NavigationBar_MainCommand(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.NavigationBar)instance;
            that.MainCommand = (global::Microsoft.UI.Xaml.Controls.AppBarButton)Value;
        }
        private object get_25_NavigationBar_IsSticky(object instance)
        {
            var that = (global::Uno.Toolkit.UI.NavigationBar)instance;
            return that.IsSticky;
        }
        private void set_25_NavigationBar_IsSticky(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.NavigationBar)instance;
            that.IsSticky = (global::System.Boolean)Value;
        }
        private object get_26_NavigationBar_IsOpen(object instance)
        {
            var that = (global::Uno.Toolkit.UI.NavigationBar)instance;
            return that.IsOpen;
        }
        private void set_26_NavigationBar_IsOpen(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.NavigationBar)instance;
            that.IsOpen = (global::System.Boolean)Value;
        }
        private object get_27_NavigationBar_ClosedDisplayMode(object instance)
        {
            var that = (global::Uno.Toolkit.UI.NavigationBar)instance;
            return that.ClosedDisplayMode;
        }
        private void set_27_NavigationBar_ClosedDisplayMode(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.NavigationBar)instance;
            that.ClosedDisplayMode = (global::Uno.Toolkit.UI.NavigationBarClosedDisplayMode)Value;
        }
        private object get_28_NavigationBar_LightDismissOverlayMode(object instance)
        {
            var that = (global::Uno.Toolkit.UI.NavigationBar)instance;
            return that.LightDismissOverlayMode;
        }
        private void set_28_NavigationBar_LightDismissOverlayMode(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.NavigationBar)instance;
            that.LightDismissOverlayMode = (global::Microsoft.UI.Xaml.Controls.LightDismissOverlayMode)Value;
        }
        private object get_29_NavigationBar_SecondaryCommands(object instance)
        {
            var that = (global::Uno.Toolkit.UI.NavigationBar)instance;
            return that.SecondaryCommands;
        }
        private object get_30_NavigationBar_OverflowButtonVisibility(object instance)
        {
            var that = (global::Uno.Toolkit.UI.NavigationBar)instance;
            return that.OverflowButtonVisibility;
        }
        private void set_30_NavigationBar_OverflowButtonVisibility(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.NavigationBar)instance;
            that.OverflowButtonVisibility = (global::Uno.Toolkit.UI.NavigationBarOverflowButtonVisibility)Value;
        }
        private object get_31_NavigationBar_IsDynamicOverflowEnabled(object instance)
        {
            var that = (global::Uno.Toolkit.UI.NavigationBar)instance;
            return that.IsDynamicOverflowEnabled;
        }
        private void set_31_NavigationBar_IsDynamicOverflowEnabled(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.NavigationBar)instance;
            that.IsDynamicOverflowEnabled = (global::System.Boolean)Value;
        }
        private object get_32_NavigationBar_DefaultLabelPosition(object instance)
        {
            var that = (global::Uno.Toolkit.UI.NavigationBar)instance;
            return that.DefaultLabelPosition;
        }
        private void set_32_NavigationBar_DefaultLabelPosition(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.NavigationBar)instance;
            that.DefaultLabelPosition = (global::Uno.Toolkit.UI.NavigationBarDefaultLabelPosition)Value;
        }
        private object get_33_NavigationBar_MainCommandMode(object instance)
        {
            var that = (global::Uno.Toolkit.UI.NavigationBar)instance;
            return that.MainCommandMode;
        }
        private void set_33_NavigationBar_MainCommandMode(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.NavigationBar)instance;
            that.MainCommandMode = (global::Uno.Toolkit.UI.MainCommandMode)Value;
        }
        private object get_34_NavigationBar_Subtitle(object instance)
        {
            var that = (global::Uno.Toolkit.UI.NavigationBar)instance;
            return that.Subtitle;
        }
        private void set_34_NavigationBar_Subtitle(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.NavigationBar)instance;
            that.Subtitle = (global::System.String)Value;
        }
        private object get_35_NavigationBar_MainCommandStyle(object instance)
        {
            var that = (global::Uno.Toolkit.UI.NavigationBar)instance;
            return that.MainCommandStyle;
        }
        private void set_35_NavigationBar_MainCommandStyle(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.NavigationBar)instance;
            that.MainCommandStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_36_LoadingView_LoadingContentTemplate(object instance)
        {
            var that = (global::Uno.Toolkit.UI.LoadingView)instance;
            return that.LoadingContentTemplate;
        }
        private void set_36_LoadingView_LoadingContentTemplate(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.LoadingView)instance;
            that.LoadingContentTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_37_ExtendedSplashScreen_Platforms(object instance)
        {
            var that = (global::Uno.Toolkit.UI.ExtendedSplashScreen)instance;
            return that.Platforms;
        }
        private void set_37_ExtendedSplashScreen_Platforms(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.ExtendedSplashScreen)instance;
            that.Platforms = (global::Uno.Toolkit.UI.SplashScreenPlatform)Value;
        }
        private object get_38_ExtendedSplashScreen_SplashScreen(object instance)
        {
            var that = (global::Uno.Toolkit.UI.ExtendedSplashScreen)instance;
            return that.SplashScreen;
        }
        private void set_38_ExtendedSplashScreen_SplashScreen(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.ExtendedSplashScreen)instance;
            that.SplashScreen = (global::Windows.ApplicationModel.Activation.SplashScreen)Value;
        }
        private object get_39_ExtendedSplashScreen_Window(object instance)
        {
            var that = (global::Uno.Toolkit.UI.ExtendedSplashScreen)instance;
            return that.Window;
        }
        private void set_39_ExtendedSplashScreen_Window(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.ExtendedSplashScreen)instance;
            that.Window = (global::Microsoft.UI.Xaml.Window)Value;
        }
        private object get_40_ExtendedSplashScreen_SplashIsEnabled(object instance)
        {
            var that = (global::Uno.Toolkit.UI.ExtendedSplashScreen)instance;
            return that.SplashIsEnabled;
        }
        private object get_41_LoadingView_UseTransitions(object instance)
        {
            var that = (global::Uno.Toolkit.UI.LoadingView)instance;
            return that.UseTransitions;
        }
        private void set_41_LoadingView_UseTransitions(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.LoadingView)instance;
            that.UseTransitions = (global::System.Boolean)Value;
        }
        private object get_42_LoadingView_Source(object instance)
        {
            var that = (global::Uno.Toolkit.UI.LoadingView)instance;
            return that.Source;
        }
        private void set_42_LoadingView_Source(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.LoadingView)instance;
            that.Source = (global::Uno.Toolkit.ILoadable)Value;
        }
        private object get_43_LoadingView_LoadingContent(object instance)
        {
            var that = (global::Uno.Toolkit.UI.LoadingView)instance;
            return that.LoadingContent;
        }
        private void set_43_LoadingView_LoadingContent(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.LoadingView)instance;
            that.LoadingContent = (global::System.Object)Value;
        }
        private object get_44_LoadingView_LoadingContentTemplateSelector(object instance)
        {
            var that = (global::Uno.Toolkit.UI.LoadingView)instance;
            return that.LoadingContentTemplateSelector;
        }
        private void set_44_LoadingView_LoadingContentTemplateSelector(object instance, object Value)
        {
            var that = (global::Uno.Toolkit.UI.LoadingView)instance;
            that.LoadingContentTemplateSelector = (global::Microsoft.UI.Xaml.Controls.DataTemplateSelector)Value;
        }
        private object get_45_ProgressRing_IsActive(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressRing)instance;
            return that.IsActive;
        }
        private void set_45_ProgressRing_IsActive(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressRing)instance;
            that.IsActive = (global::System.Boolean)Value;
        }
        private object get_46_ProgressRing_IsIndeterminate(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressRing)instance;
            return that.IsIndeterminate;
        }
        private void set_46_ProgressRing_IsIndeterminate(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressRing)instance;
            that.IsIndeterminate = (global::System.Boolean)Value;
        }
        private object get_47_ProgressRing_Maximum(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressRing)instance;
            return that.Maximum;
        }
        private void set_47_ProgressRing_Maximum(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressRing)instance;
            that.Maximum = (global::System.Double)Value;
        }
        private object get_48_ProgressRing_Minimum(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressRing)instance;
            return that.Minimum;
        }
        private void set_48_ProgressRing_Minimum(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressRing)instance;
            that.Minimum = (global::System.Double)Value;
        }
        private object get_49_ProgressRing_TemplateSettings(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressRing)instance;
            return that.TemplateSettings;
        }
        private object get_50_ProgressRing_Value(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressRing)instance;
            return that.Value;
        }
        private void set_50_ProgressRing_Value(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressRing)instance;
            that.Value = (global::System.Double)Value;
        }
        private object get_51_Shell_ContentControl(object instance)
        {
            var that = (global::UnoApp1.Presentation.Shell)instance;
            return that.ContentControl;
        }
        private object get_52_RadioButtons_Items(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            return that.Items;
        }
        private object get_53_RadioButtons_Header(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            return that.Header;
        }
        private void set_53_RadioButtons_Header(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            that.Header = (global::System.Object)Value;
        }
        private object get_54_RadioButtons_HeaderTemplate(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            return that.HeaderTemplate;
        }
        private void set_54_RadioButtons_HeaderTemplate(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            that.HeaderTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_55_RadioButtons_ItemTemplate(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            return that.ItemTemplate;
        }
        private void set_55_RadioButtons_ItemTemplate(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            that.ItemTemplate = (global::System.Object)Value;
        }
        private object get_56_RadioButtons_ItemsSource(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            return that.ItemsSource;
        }
        private void set_56_RadioButtons_ItemsSource(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            that.ItemsSource = (global::System.Object)Value;
        }
        private object get_57_RadioButtons_MaxColumns(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            return that.MaxColumns;
        }
        private void set_57_RadioButtons_MaxColumns(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            that.MaxColumns = (global::System.Int32)Value;
        }
        private object get_58_RadioButtons_SelectedIndex(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            return that.SelectedIndex;
        }
        private void set_58_RadioButtons_SelectedIndex(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            that.SelectedIndex = (global::System.Int32)Value;
        }
        private object get_59_RadioButtons_SelectedItem(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            return that.SelectedItem;
        }
        private void set_59_RadioButtons_SelectedItem(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            that.SelectedItem = (global::System.Object)Value;
        }
        private object get_60_Color_A(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.A;
        }
        private void set_60_Color_A(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.A = (global::System.Byte)Value;
        }
        private object get_61_Color_R(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.R;
        }
        private void set_61_Color_R(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.R = (global::System.Byte)Value;
        }
        private object get_62_Color_G(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.G;
        }
        private void set_62_Color_G(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.G = (global::System.Byte)Value;
        }
        private object get_63_Color_B(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.B;
        }
        private void set_63_Color_B(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.B = (global::System.Byte)Value;
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember xamlMember = null;
            global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Microsoft.UI.Xaml.Controls.XamlControlsResources.UseCompactResources":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.XamlControlsResources");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "UseCompactResources", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_XamlControlsResources_UseCompactResources;
                xamlMember.Setter = set_0_XamlControlsResources_UseCompactResources;
                break;
            case "Uno.Toolkit.UI.Material.MaterialToolkitTheme.ColorOverrideSource":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.Material.MaterialToolkitTheme");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "ColorOverrideSource", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_1_MaterialToolkitTheme_ColorOverrideSource;
                xamlMember.Setter = set_1_MaterialToolkitTheme_ColorOverrideSource;
                break;
            case "Uno.Toolkit.UI.Material.MaterialToolkitTheme.FontOverrideSource":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.Material.MaterialToolkitTheme");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "FontOverrideSource", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_2_MaterialToolkitTheme_FontOverrideSource;
                xamlMember.Setter = set_2_MaterialToolkitTheme_FontOverrideSource;
                break;
            case "Uno.Toolkit.UI.Material.MaterialToolkitTheme.FontOverrideDictionary":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.Material.MaterialToolkitTheme");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "FontOverrideDictionary", "Microsoft.UI.Xaml.ResourceDictionary");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_3_MaterialToolkitTheme_FontOverrideDictionary;
                xamlMember.Setter = set_3_MaterialToolkitTheme_FontOverrideDictionary;
                break;
            case "Uno.Toolkit.UI.Material.MaterialToolkitTheme.ColorOverrideDictionary":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.Material.MaterialToolkitTheme");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "ColorOverrideDictionary", "Microsoft.UI.Xaml.ResourceDictionary");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_MaterialToolkitTheme_ColorOverrideDictionary;
                xamlMember.Setter = set_4_MaterialToolkitTheme_ColorOverrideDictionary;
                break;
            case "Uno.Toolkit.UI.TabBar.SelectedItem":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.TabBar");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "SelectedItem", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_5_TabBar_SelectedItem;
                xamlMember.Setter = set_5_TabBar_SelectedItem;
                break;
            case "Uno.Toolkit.UI.TabBar.SelectedIndex":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.TabBar");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "SelectedIndex", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_6_TabBar_SelectedIndex;
                xamlMember.Setter = set_6_TabBar_SelectedIndex;
                break;
            case "Uno.Toolkit.UI.TabBar.TemplateSettings":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.TabBar");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "TemplateSettings", "Uno.Toolkit.UI.TabBarTemplateSettings");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_7_TabBar_TemplateSettings;
                xamlMember.Setter = set_7_TabBar_TemplateSettings;
                break;
            case "Uno.Toolkit.UI.TabBar.Orientation":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.TabBar");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "Orientation", "Microsoft.UI.Xaml.Controls.Orientation");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_8_TabBar_Orientation;
                xamlMember.Setter = set_8_TabBar_Orientation;
                break;
            case "Uno.Toolkit.UI.TabBar.SelectionIndicatorContent":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.TabBar");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "SelectionIndicatorContent", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_9_TabBar_SelectionIndicatorContent;
                xamlMember.Setter = set_9_TabBar_SelectionIndicatorContent;
                break;
            case "Uno.Toolkit.UI.TabBar.SelectionIndicatorContentTemplate":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.TabBar");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "SelectionIndicatorContentTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_TabBar_SelectionIndicatorContentTemplate;
                xamlMember.Setter = set_10_TabBar_SelectionIndicatorContentTemplate;
                break;
            case "Uno.Toolkit.UI.TabBar.SelectionIndicatorPresenterStyle":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.TabBar");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "SelectionIndicatorPresenterStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_TabBar_SelectionIndicatorPresenterStyle;
                xamlMember.Setter = set_11_TabBar_SelectionIndicatorPresenterStyle;
                break;
            case "Uno.Toolkit.UI.TabBar.SelectionIndicatorTransitionMode":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.TabBar");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "SelectionIndicatorTransitionMode", "Uno.Toolkit.UI.IndicatorTransitionMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_12_TabBar_SelectionIndicatorTransitionMode;
                xamlMember.Setter = set_12_TabBar_SelectionIndicatorTransitionMode;
                break;
            case "Uno.Toolkit.UI.TabBar.SelectionIndicatorPlacement":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.TabBar");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "SelectionIndicatorPlacement", "Uno.Toolkit.UI.IndicatorPlacement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_TabBar_SelectionIndicatorPlacement;
                xamlMember.Setter = set_13_TabBar_SelectionIndicatorPlacement;
                break;
            case "Uno.Toolkit.UI.TabBarItem.Icon":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.TabBarItem");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "Icon", "Microsoft.UI.Xaml.Controls.IconElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_14_TabBarItem_Icon;
                xamlMember.Setter = set_14_TabBarItem_Icon;
                break;
            case "Uno.Toolkit.UI.TabBarItem.BadgeVisibility":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.TabBarItem");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "BadgeVisibility", "Microsoft.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_15_TabBarItem_BadgeVisibility;
                xamlMember.Setter = set_15_TabBarItem_BadgeVisibility;
                break;
            case "Uno.Toolkit.UI.TabBarItem.BadgeValue":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.TabBarItem");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "BadgeValue", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_TabBarItem_BadgeValue;
                xamlMember.Setter = set_16_TabBarItem_BadgeValue;
                break;
            case "Uno.Toolkit.UI.TabBarItem.IsSelectable":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.TabBarItem");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "IsSelectable", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_TabBarItem_IsSelectable;
                xamlMember.Setter = set_17_TabBarItem_IsSelectable;
                break;
            case "Uno.Toolkit.UI.TabBarItem.Flyout":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.TabBarItem");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "Flyout", "Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_TabBarItem_Flyout;
                xamlMember.Setter = set_18_TabBarItem_Flyout;
                break;
            case "Uno.Toolkit.UI.TabBarItem.Command":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.TabBarItem");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "Command", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_19_TabBarItem_Command;
                xamlMember.Setter = set_19_TabBarItem_Command;
                break;
            case "Uno.Toolkit.UI.TabBarItem.CommandParameter":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.TabBarItem");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "CommandParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_20_TabBarItem_CommandParameter;
                xamlMember.Setter = set_20_TabBarItem_CommandParameter;
                break;
            case "Uno.Toolkit.UI.SafeArea.Insets":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.SafeArea");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "Insets", "Uno.Toolkit.UI.SafeArea.InsetMask");
                xamlMember.SetTargetTypeName("Microsoft.UI.Xaml.DependencyObject");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_21_SafeArea_Insets;
                xamlMember.Setter = set_21_SafeArea_Insets;
                break;
            case "Uno.Toolkit.UI.SafeArea.Mode":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.SafeArea");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "Mode", "Uno.Toolkit.UI.SafeArea.InsetMode");
                xamlMember.SetTargetTypeName("Microsoft.UI.Xaml.DependencyObject");
                xamlMember.SetIsDependencyProperty();
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_22_SafeArea_Mode;
                xamlMember.Setter = set_22_SafeArea_Mode;
                break;
            case "Uno.Toolkit.UI.NavigationBar.PrimaryCommands":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.NavigationBar");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "PrimaryCommands", "Windows.Foundation.Collections.IObservableVector`1<Microsoft.UI.Xaml.Controls.ICommandBarElement>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_23_NavigationBar_PrimaryCommands;
                xamlMember.SetIsReadOnly();
                break;
            case "Uno.Toolkit.UI.NavigationBar.MainCommand":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.NavigationBar");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "MainCommand", "Microsoft.UI.Xaml.Controls.AppBarButton");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_24_NavigationBar_MainCommand;
                xamlMember.Setter = set_24_NavigationBar_MainCommand;
                break;
            case "Uno.Toolkit.UI.NavigationBar.IsSticky":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.NavigationBar");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "IsSticky", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_NavigationBar_IsSticky;
                xamlMember.Setter = set_25_NavigationBar_IsSticky;
                break;
            case "Uno.Toolkit.UI.NavigationBar.IsOpen":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.NavigationBar");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "IsOpen", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_26_NavigationBar_IsOpen;
                xamlMember.Setter = set_26_NavigationBar_IsOpen;
                break;
            case "Uno.Toolkit.UI.NavigationBar.ClosedDisplayMode":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.NavigationBar");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "ClosedDisplayMode", "Uno.Toolkit.UI.NavigationBarClosedDisplayMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_27_NavigationBar_ClosedDisplayMode;
                xamlMember.Setter = set_27_NavigationBar_ClosedDisplayMode;
                break;
            case "Uno.Toolkit.UI.NavigationBar.LightDismissOverlayMode":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.NavigationBar");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "LightDismissOverlayMode", "Microsoft.UI.Xaml.Controls.LightDismissOverlayMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_28_NavigationBar_LightDismissOverlayMode;
                xamlMember.Setter = set_28_NavigationBar_LightDismissOverlayMode;
                break;
            case "Uno.Toolkit.UI.NavigationBar.SecondaryCommands":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.NavigationBar");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "SecondaryCommands", "Windows.Foundation.Collections.IObservableVector`1<Microsoft.UI.Xaml.Controls.ICommandBarElement>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_29_NavigationBar_SecondaryCommands;
                xamlMember.SetIsReadOnly();
                break;
            case "Uno.Toolkit.UI.NavigationBar.OverflowButtonVisibility":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.NavigationBar");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "OverflowButtonVisibility", "Uno.Toolkit.UI.NavigationBarOverflowButtonVisibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_30_NavigationBar_OverflowButtonVisibility;
                xamlMember.Setter = set_30_NavigationBar_OverflowButtonVisibility;
                break;
            case "Uno.Toolkit.UI.NavigationBar.IsDynamicOverflowEnabled":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.NavigationBar");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "IsDynamicOverflowEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_31_NavigationBar_IsDynamicOverflowEnabled;
                xamlMember.Setter = set_31_NavigationBar_IsDynamicOverflowEnabled;
                break;
            case "Uno.Toolkit.UI.NavigationBar.DefaultLabelPosition":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.NavigationBar");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "DefaultLabelPosition", "Uno.Toolkit.UI.NavigationBarDefaultLabelPosition");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_32_NavigationBar_DefaultLabelPosition;
                xamlMember.Setter = set_32_NavigationBar_DefaultLabelPosition;
                break;
            case "Uno.Toolkit.UI.NavigationBar.MainCommandMode":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.NavigationBar");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "MainCommandMode", "Uno.Toolkit.UI.MainCommandMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_33_NavigationBar_MainCommandMode;
                xamlMember.Setter = set_33_NavigationBar_MainCommandMode;
                break;
            case "Uno.Toolkit.UI.NavigationBar.Subtitle":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.NavigationBar");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "Subtitle", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_34_NavigationBar_Subtitle;
                xamlMember.Setter = set_34_NavigationBar_Subtitle;
                break;
            case "Uno.Toolkit.UI.NavigationBar.MainCommandStyle":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.NavigationBar");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "MainCommandStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_35_NavigationBar_MainCommandStyle;
                xamlMember.Setter = set_35_NavigationBar_MainCommandStyle;
                break;
            case "Uno.Toolkit.UI.LoadingView.LoadingContentTemplate":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.LoadingView");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "LoadingContentTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_36_LoadingView_LoadingContentTemplate;
                xamlMember.Setter = set_36_LoadingView_LoadingContentTemplate;
                break;
            case "Uno.Toolkit.UI.ExtendedSplashScreen.Platforms":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.ExtendedSplashScreen");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "Platforms", "Uno.Toolkit.UI.SplashScreenPlatform");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_37_ExtendedSplashScreen_Platforms;
                xamlMember.Setter = set_37_ExtendedSplashScreen_Platforms;
                break;
            case "Uno.Toolkit.UI.ExtendedSplashScreen.SplashScreen":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.ExtendedSplashScreen");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "SplashScreen", "Windows.ApplicationModel.Activation.SplashScreen");
                xamlMember.Getter = get_38_ExtendedSplashScreen_SplashScreen;
                xamlMember.Setter = set_38_ExtendedSplashScreen_SplashScreen;
                break;
            case "Uno.Toolkit.UI.ExtendedSplashScreen.Window":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.ExtendedSplashScreen");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "Window", "Microsoft.UI.Xaml.Window");
                xamlMember.Getter = get_39_ExtendedSplashScreen_Window;
                xamlMember.Setter = set_39_ExtendedSplashScreen_Window;
                break;
            case "Uno.Toolkit.UI.ExtendedSplashScreen.SplashIsEnabled":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.ExtendedSplashScreen");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "SplashIsEnabled", "Boolean");
                xamlMember.Getter = get_40_ExtendedSplashScreen_SplashIsEnabled;
                xamlMember.SetIsReadOnly();
                break;
            case "Uno.Toolkit.UI.LoadingView.UseTransitions":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.LoadingView");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "UseTransitions", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_41_LoadingView_UseTransitions;
                xamlMember.Setter = set_41_LoadingView_UseTransitions;
                break;
            case "Uno.Toolkit.UI.LoadingView.Source":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.LoadingView");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "Source", "Uno.Toolkit.ILoadable");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_42_LoadingView_Source;
                xamlMember.Setter = set_42_LoadingView_Source;
                break;
            case "Uno.Toolkit.UI.LoadingView.LoadingContent":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.LoadingView");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "LoadingContent", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_43_LoadingView_LoadingContent;
                xamlMember.Setter = set_43_LoadingView_LoadingContent;
                break;
            case "Uno.Toolkit.UI.LoadingView.LoadingContentTemplateSelector":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Uno.Toolkit.UI.LoadingView");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "LoadingContentTemplateSelector", "Microsoft.UI.Xaml.Controls.DataTemplateSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_44_LoadingView_LoadingContentTemplateSelector;
                xamlMember.Setter = set_44_LoadingView_LoadingContentTemplateSelector;
                break;
            case "Microsoft.UI.Xaml.Controls.ProgressRing.IsActive":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ProgressRing");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "IsActive", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_45_ProgressRing_IsActive;
                xamlMember.Setter = set_45_ProgressRing_IsActive;
                break;
            case "Microsoft.UI.Xaml.Controls.ProgressRing.IsIndeterminate":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ProgressRing");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "IsIndeterminate", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_46_ProgressRing_IsIndeterminate;
                xamlMember.Setter = set_46_ProgressRing_IsIndeterminate;
                break;
            case "Microsoft.UI.Xaml.Controls.ProgressRing.Maximum":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ProgressRing");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "Maximum", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_47_ProgressRing_Maximum;
                xamlMember.Setter = set_47_ProgressRing_Maximum;
                break;
            case "Microsoft.UI.Xaml.Controls.ProgressRing.Minimum":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ProgressRing");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "Minimum", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_48_ProgressRing_Minimum;
                xamlMember.Setter = set_48_ProgressRing_Minimum;
                break;
            case "Microsoft.UI.Xaml.Controls.ProgressRing.TemplateSettings":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ProgressRing");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "TemplateSettings", "Microsoft.UI.Xaml.Controls.ProgressRingTemplateSettings");
                xamlMember.Getter = get_49_ProgressRing_TemplateSettings;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.ProgressRing.Value":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ProgressRing");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "Value", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_50_ProgressRing_Value;
                xamlMember.Setter = set_50_ProgressRing_Value;
                break;
            case "UnoApp1.Presentation.Shell.ContentControl":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("UnoApp1.Presentation.Shell");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "ContentControl", "Microsoft.UI.Xaml.Controls.ContentControl");
                xamlMember.Getter = get_51_Shell_ContentControl;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.RadioButtons.Items":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.RadioButtons");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "Items", "System.Collections.Generic.IList`1<Object>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_52_RadioButtons_Items;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.RadioButtons.Header":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.RadioButtons");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "Header", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_53_RadioButtons_Header;
                xamlMember.Setter = set_53_RadioButtons_Header;
                break;
            case "Microsoft.UI.Xaml.Controls.RadioButtons.HeaderTemplate":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.RadioButtons");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "HeaderTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_54_RadioButtons_HeaderTemplate;
                xamlMember.Setter = set_54_RadioButtons_HeaderTemplate;
                break;
            case "Microsoft.UI.Xaml.Controls.RadioButtons.ItemTemplate":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.RadioButtons");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "ItemTemplate", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_55_RadioButtons_ItemTemplate;
                xamlMember.Setter = set_55_RadioButtons_ItemTemplate;
                break;
            case "Microsoft.UI.Xaml.Controls.RadioButtons.ItemsSource":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.RadioButtons");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "ItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_56_RadioButtons_ItemsSource;
                xamlMember.Setter = set_56_RadioButtons_ItemsSource;
                break;
            case "Microsoft.UI.Xaml.Controls.RadioButtons.MaxColumns":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.RadioButtons");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "MaxColumns", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_57_RadioButtons_MaxColumns;
                xamlMember.Setter = set_57_RadioButtons_MaxColumns;
                break;
            case "Microsoft.UI.Xaml.Controls.RadioButtons.SelectedIndex":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.RadioButtons");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "SelectedIndex", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_58_RadioButtons_SelectedIndex;
                xamlMember.Setter = set_58_RadioButtons_SelectedIndex;
                break;
            case "Microsoft.UI.Xaml.Controls.RadioButtons.SelectedItem":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.RadioButtons");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "SelectedItem", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_59_RadioButtons_SelectedItem;
                xamlMember.Setter = set_59_RadioButtons_SelectedItem;
                break;
            case "Windows.UI.Color.A":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "A", "Byte");
                xamlMember.Getter = get_60_Color_A;
                xamlMember.Setter = set_60_Color_A;
                break;
            case "Windows.UI.Color.R":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "R", "Byte");
                xamlMember.Getter = get_61_Color_R;
                xamlMember.Setter = set_61_Color_R;
                break;
            case "Windows.UI.Color.G":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "G", "Byte");
                xamlMember.Getter = get_62_Color_G;
                xamlMember.Setter = set_62_Color_G;
                break;
            case "Windows.UI.Color.B":
                userType = (global::UnoApp1.UnoApp1_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::UnoApp1.UnoApp1_XamlTypeInfo.XamlMember(this, "B", "Byte");
                xamlMember.Getter = get_63_Color_B;
                xamlMember.Setter = set_63_Color_B;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Microsoft.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType BoxedType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);
    internal delegate object CreateFromStringMethod(string args);
    internal delegate object BoxInstanceMethod(object instance);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::UnoApp1.UnoApp1_XamlTypeInfo.XamlSystemBaseType
        , global::Microsoft.UI.Xaml.Markup.IXamlType
    {
        global::UnoApp1.UnoApp1_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Microsoft.UI.Xaml.Markup.IXamlType _baseType;
        global::Microsoft.UI.Xaml.Markup.IXamlType _boxedType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::UnoApp1.UnoApp1_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Microsoft.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Microsoft.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }
        override public global::Microsoft.UI.Xaml.Markup.IXamlType BoxedType { get { return _boxedType; } }

        override public global::Microsoft.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (BoxedType != null)
            {
                return BoxInstance(BoxedType.CreateFromString(input));
            }

            if (CreateFromStringMethod != null)
            {
                return this.CreateFromStringMethod(input);
            }
            else if (_enumValues != null)
            {
                long value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    long enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt64(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt64(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt64(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(this.UnderlyingType));
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }
        public CreateFromStringMethod CreateFromStringMethod {get; set; }
        public BoxInstanceMethod BoxInstance {get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void SetBoxedType(global::Microsoft.UI.Xaml.Markup.IXamlType boxedType)
        {
            _boxedType = boxedType;
        }

        public object BoxType<T>(object instance) where T: struct
        {
            T unwrapped = (T)instance;
            return new global::System.Nullable<T>(unwrapped);
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 1.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Microsoft.UI.Xaml.Markup.IXamlMember
    {
        global::UnoApp1.UnoApp1_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::UnoApp1.UnoApp1_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Microsoft.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Microsoft.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

